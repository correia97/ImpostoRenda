# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

jobs:
 - job: AzureBuild
   displayName: Build do Azure sem container     
   pool:
      vmImage: 'ubuntu-latest'
   variables:
    buildConfiguration: 'Release'

   steps:
   - task: UseDotNet@2
     displayName: 'Instalação do framewok 2.2'
     inputs:
      version: 2.2.x
      performMultiLevelLookup: true
      includePreviewVersions: true

   - task: DotNetCoreCLI@2
     displayName: 'Restauração de pacotes'
     inputs:
      command: 'restore'

   - task: SonarCloudPrepare@1
     displayName: 'Configuração do scanner do Sonar'
     inputs:
       SonarCloud: 'Sonar'
       organization: 'correia97'
       scannerMode: 'MSBuild'
       projectKey: 'correia97_ImpostoRenda'
       projectName: 'ImpostoRenda'
       extraProperties: |
            sonar.exclusions=**/*.js,**/*.css,**/obj/**,**/*.dll,**/*.html,**/*.cshtml
            sonar.branch.name=$(Build.SourceBranchName)
            sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/results/coverage.opencover.xml

   - task: DotNetCoreCLI@2
     displayName: 'Build da aplicação'
     inputs:
      command: 'build'

   - task: DotNetCoreCLI@2
     displayName: 'Execução dos Testes de unidade'
     inputs:
      command: 'test'
      arguments: '--no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=\"$(Build.SourcesDirectory)/results/\'
      testRunTitle: 'Tests'

   - task: PublishCodeCoverageResults@1
     displayName: 'Publicação da cobertura de código'
     inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/results/coverage.opencover.xml'

   - task: SonarCloudAnalyze@1
     displayName: 'Analise do Sonar'

   - task: SonarCloudPublish@1
     displayName: 'Publicação dos dados no sonarCloud'
     inputs:
      pollingTimeoutSec: '300'

   - task: CmdLine@2
     displayName: Instalação do scanner Codecov
     inputs:
      script: 'dotnet tool install --tool-path ./ Codecov.Tool'

   - task: CmdLine@2
     displayName: Pulicação dos dados no Codecov
     inputs:
      script: './codecov -f "$(Build.SourcesDirectory)/results/coverage.opencover.xml" -t $(codecovToken)'

   - task: reportgenerator@4
     displayName: Geração do relatório de cobertura
     inputs:
      reports: '$(Build.SourcesDirectory)/results/coverage.opencover.xml'
      targetdir: '$(Build.SourcesDirectory)/results/'
      sourcedirs: '$(Build.SourcesDirectory)/results/'

   - task: PublishTestResults@2
     displayName: Publicação do resultado do teste no azure devops
     inputs:
      testResultsFormat: 'XUnit'
      testResultsFiles: '**/*.xml'
      searchFolder: '$(Build.SourcesDirectory)/results/'

   - task: DotNetCoreCLI@2
     displayName: 'Publicação do projeto API'
     inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/ImpostoRenda.API.csproj'
      arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)/api'
      workingDirectory: '$(Build.SourcesDirectory)'

   - task: DotNetCoreCLI@2
     displayName: 'Publicação do projeto WEB'
     inputs:
      command: 'publish'
      publishWebProjects: true
      projects: '**/ImpostoRenda.Web.csproj'
      arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)/web'
      workingDirectory: '$(Build.SourcesDirectory)'

   - task: PublishBuildArtifacts@1
     displayName: 'Geração da pasta para o CD do azure devops'
     inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
     condition: succeededOrFailed()
     
 - job: DockerBuid
   displayName: Build no Docker
   pool:
      vmImage: 'ubuntu-latest'
   steps:
   - task: DockerInstaller@0
     displayName: 'Instalação do Docker'
     inputs:
      dockerVersion: '17.09.0-ce'

   - task: CmdLine@2
     displayName: 'Build da Imagem docker com Analise do sonar e codecov'
     inputs:
        script: |
          docker build --build-arg sonarLogin=$(sonarToken) --build-arg codecovToken=$(codecovToken) .


 - job: IntegratedTest
   displayName: Execução de Teste Integrado no Docker
   pool:
      vmImage: 'ubuntu-latest'
   steps:
    - task: DockerInstaller@0
      displayName: 'Instalação do Docker'
      inputs:
       dockerVersion: '17.09.0-ce'

    - task: CmdLine@2    
      displayName: 'Instalação do newman'
      inputs:
        script: |
          sudo npm install -g newman 

    - task: CmdLine@2
      displayName: 'Execução do projto via compose'
      inputs:
        script: |
          docker-compose up --build -d

    - task: CmdLine@2
      displayName: 'Execução dos testes'
      inputs:
        script: |
          newman run ImpostoRenda.postman_collection.json -n 20 -r cli,json --reporter-json-export ./result/result.json                          